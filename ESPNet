{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8679592,"sourceType":"datasetVersion","datasetId":5203053}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/jjenolin/espnet?scriptVersionId=183463391\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import os\nimport shutil\nimport random\n\nsource_base_dir = '/kaggle/input/image-pro/Image_Processing'  \n\n\nbase_dir = '/kaggle/working/'\n\n\noriginal_dir = os.path.join(source_base_dir, 'Original')\npixelated_dir = os.path.join(source_base_dir, 'Pixelated')\n\n\ntrain_dir = os.path.join(base_dir, 'train')\ntest_dir = os.path.join(base_dir, 'test')\n\n\nos.makedirs(os.path.join(train_dir, 'Original'), exist_ok=True)\nos.makedirs(os.path.join(train_dir, 'Pixelated'), exist_ok=True)\nos.makedirs(os.path.join(test_dir, 'Original'), exist_ok=True)\nos.makedirs(os.path.join(test_dir, 'Pixelated'), exist_ok=True)\n\n\nsplit_ratio = 0.8\n\ndef split_data(original_dir, pixelated_dir, train_dir, test_dir, split_ratio):\n    original_files = os.listdir(original_dir)\n    pixelated_files = os.listdir(pixelated_dir)\n\n    \n    paired_files = [(file, file) for file in original_files if file in pixelated_files]\n\n    random.shuffle(paired_files)\n    split_index = int(len(paired_files) * split_ratio)\n    train_files = paired_files[:split_index]\n    test_files = paired_files[split_index:]\n\n    for original_file, pixelated_file in train_files:\n        shutil.copy(os.path.join(original_dir, original_file), os.path.join(train_dir, 'Original', original_file))\n        shutil.copy(os.path.join(pixelated_dir, pixelated_file), os.path.join(train_dir, 'Pixelated', pixelated_file))\n    \n    for original_file, pixelated_file in test_files:\n        shutil.copy(os.path.join(original_dir, original_file), os.path.join(test_dir, 'Original', original_file))\n        shutil.copy(os.path.join(pixelated_dir, pixelated_file), os.path.join(test_dir, 'Pixelated', pixelated_file))\n\nsplit_data(original_dir, pixelated_dir, train_dir, test_dir, split_ratio)","metadata":{"execution":{"iopub.status.busy":"2024-06-14T12:19:21.244435Z","iopub.execute_input":"2024-06-14T12:19:21.246012Z","iopub.status.idle":"2024-06-14T12:20:52.334717Z","shell.execute_reply.started":"2024-06-14T12:19:21.245955Z","shell.execute_reply":"2024-06-14T12:20:52.333375Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import torch\nimport torchvision\nfrom torchvision import transforms, datasets\nfrom torch.utils.data import DataLoader\n\n# Define transformations for the images\ntransform = transforms.Compose([\n    transforms.Resize((256, 256)),  # Resize to 256x256\n    transforms.ToTensor(),          # Convert image to tensor\n    transforms.Normalize(mean=[0.5, 0.5, 0.5], std=[0.5, 0.5, 0.5])  # Normalize to [-1, 1]\n])\n\n# Load train and test datasets\ntrain_data = datasets.ImageFolder('/kaggle/working/train', transform=transform)\ntest_data = datasets.ImageFolder('/kaggle/working/test', transform=transform)\n\n# Create data loaders\ntrain_loader = DataLoader(train_data, batch_size=32, shuffle=True)\ntest_loader = DataLoader(test_data, batch_size=32, shuffle=False)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-14T12:21:46.843924Z","iopub.execute_input":"2024-06-14T12:21:46.844816Z","iopub.status.idle":"2024-06-14T12:21:51.345405Z","shell.execute_reply.started":"2024-06-14T12:21:46.844765Z","shell.execute_reply":"2024-06-14T12:21:51.344256Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import torch.nn as nn\nimport torch.nn.functional as F\n\nclass ESPNet(nn.Module):\n    def __init__(self):\n        super(ESPNet, self).__init__()\n        self.conv1 = nn.Conv2d(3, 16, 3, padding=1)\n        self.pool = nn.MaxPool2d(2, 2)\n        self.conv2 = nn.Conv2d(16, 32, 3, padding=1)\n        self.fc1 = nn.Linear(32 * 64 * 64, 128)\n        self.fc2 = nn.Linear(128, 2)  # 2 classes: pixelated or original\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 32 * 64 * 64)  # Flatten the tensor\n        x = F.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\n\n# Initialize the model\nmodel = ESPNet()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T12:22:13.633788Z","iopub.execute_input":"2024-06-14T12:22:13.634347Z","iopub.status.idle":"2024-06-14T12:22:13.858692Z","shell.execute_reply.started":"2024-06-14T12:22:13.634312Z","shell.execute_reply":"2024-06-14T12:22:13.857735Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import torch.optim as optim\n\n# Define loss function and optimizer\ncriterion = nn.CrossEntropyLoss()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\n\n# Training loop\nepochs = 10\n\nfor epoch in range(epochs):\n    running_loss = 0.0\n    for i, data in enumerate(train_loader, 0):\n        inputs, labels = data\n        optimizer.zero_grad()\n\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n\n        running_loss += loss.item()\n        if i % 10 == 9:    # Print every 10 mini-batches\n            print('[%d, %5d] loss: %.3f' %\n                  (epoch + 1, i + 1, running_loss / 10))\n            running_loss = 0.0\n\nprint('Finished Training')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T12:22:17.233982Z","iopub.execute_input":"2024-06-14T12:22:17.234381Z","iopub.status.idle":"2024-06-14T13:57:49.545856Z","shell.execute_reply.started":"2024-06-14T12:22:17.234349Z","shell.execute_reply":"2024-06-14T13:57:49.54237Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"[1,    10] loss: 1.758\n[1,    20] loss: 0.466\n[1,    30] loss: 0.444\n[1,    40] loss: 0.475\n[1,    50] loss: 0.376\n[1,    60] loss: 0.318\n[1,    70] loss: 0.376\n[1,    80] loss: 0.376\n[1,    90] loss: 0.359\n[1,   100] loss: 0.377\n[1,   110] loss: 0.360\n[1,   120] loss: 0.355\n[1,   130] loss: 0.371\n[1,   140] loss: 0.345\n[1,   150] loss: 0.392\n[1,   160] loss: 0.340\n[1,   170] loss: 0.330\n[1,   180] loss: 0.371\n[1,   190] loss: 0.372\n[1,   200] loss: 0.394\n[1,   210] loss: 0.321\n[1,   220] loss: 0.414\n[1,   230] loss: 0.323\n[1,   240] loss: 0.328\n[2,    10] loss: 0.396\n[2,    20] loss: 0.325\n[2,    30] loss: 0.330\n[2,    40] loss: 0.320\n[2,    50] loss: 0.313\n[2,    60] loss: 0.300\n[2,    70] loss: 0.343\n[2,    80] loss: 0.324\n[2,    90] loss: 0.362\n[2,   100] loss: 0.355\n[2,   110] loss: 0.310\n[2,   120] loss: 0.289\n[2,   130] loss: 0.230\n[2,   140] loss: 0.319\n[2,   150] loss: 0.316\n[2,   160] loss: 0.315\n[2,   170] loss: 0.370\n[2,   180] loss: 0.289\n[2,   190] loss: 0.297\n[2,   200] loss: 0.321\n[2,   210] loss: 0.319\n[2,   220] loss: 0.301\n[2,   230] loss: 0.333\n[2,   240] loss: 0.308\n[3,    10] loss: 0.308\n[3,    20] loss: 0.297\n[3,    30] loss: 0.291\n[3,    40] loss: 0.300\n[3,    50] loss: 0.316\n[3,    60] loss: 0.308\n[3,    70] loss: 0.310\n[3,    80] loss: 0.298\n[3,    90] loss: 0.292\n[3,   100] loss: 0.236\n[3,   110] loss: 0.289\n[3,   120] loss: 0.319\n[3,   130] loss: 0.312\n[3,   140] loss: 0.311\n[3,   150] loss: 0.296\n[3,   160] loss: 0.296\n[3,   170] loss: 0.283\n[3,   180] loss: 0.324\n[3,   190] loss: 0.333\n[3,   200] loss: 0.279\n[3,   210] loss: 0.286\n[3,   220] loss: 0.246\n[3,   230] loss: 0.320\n[3,   240] loss: 0.302\n[4,    10] loss: 0.245\n[4,    20] loss: 0.197\n[4,    30] loss: 0.298\n[4,    40] loss: 0.243\n[4,    50] loss: 0.220\n[4,    60] loss: 0.252\n[4,    70] loss: 0.247\n[4,    80] loss: 0.257\n[4,    90] loss: 0.240\n[4,   100] loss: 0.312\n[4,   110] loss: 0.266\n[4,   120] loss: 0.277\n[4,   130] loss: 0.255\n[4,   140] loss: 0.289\n[4,   150] loss: 0.285\n[4,   160] loss: 0.306\n[4,   170] loss: 0.275\n[4,   180] loss: 0.235\n[4,   190] loss: 0.212\n[4,   200] loss: 0.287\n[4,   210] loss: 0.246\n[4,   220] loss: 0.268\n[4,   230] loss: 0.306\n[4,   240] loss: 0.241\n[5,    10] loss: 0.210\n[5,    20] loss: 0.229\n[5,    30] loss: 0.255\n[5,    40] loss: 0.190\n[5,    50] loss: 0.215\n[5,    60] loss: 0.175\n[5,    70] loss: 0.204\n[5,    80] loss: 0.180\n[5,    90] loss: 0.224\n[5,   100] loss: 0.209\n[5,   110] loss: 0.226\n[5,   120] loss: 0.211\n[5,   130] loss: 0.237\n[5,   140] loss: 0.254\n[5,   150] loss: 0.167\n[5,   160] loss: 0.221\n[5,   170] loss: 0.219\n[5,   180] loss: 0.268\n[5,   190] loss: 0.212\n[5,   200] loss: 0.256\n[5,   210] loss: 0.232\n[5,   220] loss: 0.241\n[5,   230] loss: 0.221\n[5,   240] loss: 0.294\n[6,    10] loss: 0.179\n[6,    20] loss: 0.168\n[6,    30] loss: 0.180\n[6,    40] loss: 0.195\n[6,    50] loss: 0.148\n[6,    60] loss: 0.193\n[6,    70] loss: 0.175\n[6,    80] loss: 0.168\n[6,    90] loss: 0.181\n[6,   100] loss: 0.147\n[6,   110] loss: 0.234\n[6,   120] loss: 0.238\n[6,   130] loss: 0.207\n[6,   140] loss: 0.185\n[6,   150] loss: 0.202\n[6,   160] loss: 0.225\n[6,   170] loss: 0.191\n[6,   180] loss: 0.236\n[6,   190] loss: 0.212\n[6,   200] loss: 0.207\n[6,   210] loss: 0.215\n[6,   220] loss: 0.231\n[6,   230] loss: 0.230\n[6,   240] loss: 0.172\n[7,    10] loss: 0.173\n[7,    20] loss: 0.159\n[7,    30] loss: 0.147\n[7,    40] loss: 0.148\n[7,    50] loss: 0.113\n[7,    60] loss: 0.126\n[7,    70] loss: 0.197\n[7,    80] loss: 0.145\n[7,    90] loss: 0.164\n[7,   100] loss: 0.159\n[7,   110] loss: 0.160\n[7,   120] loss: 0.169\n[7,   130] loss: 0.178\n[7,   140] loss: 0.159\n[7,   150] loss: 0.174\n[7,   160] loss: 0.154\n[7,   170] loss: 0.204\n[7,   180] loss: 0.186\n[7,   190] loss: 0.193\n[7,   200] loss: 0.205\n[7,   210] loss: 0.169\n[7,   220] loss: 0.136\n[7,   230] loss: 0.191\n[7,   240] loss: 0.212\n[8,    10] loss: 0.129\n[8,    20] loss: 0.116\n[8,    30] loss: 0.095\n[8,    40] loss: 0.112\n[8,    50] loss: 0.144\n[8,    60] loss: 0.133\n[8,    70] loss: 0.116\n[8,    80] loss: 0.199\n[8,    90] loss: 0.128\n[8,   100] loss: 0.137\n[8,   110] loss: 0.139\n[8,   120] loss: 0.158\n[8,   130] loss: 0.146\n[8,   140] loss: 0.142\n[8,   150] loss: 0.170\n[8,   160] loss: 0.104\n[8,   170] loss: 0.144\n[8,   180] loss: 0.155\n[8,   190] loss: 0.185\n[8,   200] loss: 0.147\n[8,   210] loss: 0.198\n[8,   220] loss: 0.182\n[8,   230] loss: 0.192\n[8,   240] loss: 0.152\n[9,    10] loss: 0.135\n[9,    20] loss: 0.107\n[9,    30] loss: 0.117\n[9,    40] loss: 0.099\n[9,    50] loss: 0.098\n[9,    60] loss: 0.123\n[9,    70] loss: 0.086\n[9,    80] loss: 0.097\n[9,    90] loss: 0.154\n[9,   100] loss: 0.118\n[9,   110] loss: 0.109\n[9,   120] loss: 0.106\n[9,   130] loss: 0.106\n[9,   140] loss: 0.156\n[9,   150] loss: 0.137\n[9,   160] loss: 0.160\n[9,   170] loss: 0.156\n[9,   180] loss: 0.137\n[9,   190] loss: 0.166\n[9,   200] loss: 0.115\n[9,   210] loss: 0.130\n[9,   220] loss: 0.217\n[9,   230] loss: 0.178\n[9,   240] loss: 0.120\n[10,    10] loss: 0.103\n[10,    20] loss: 0.102\n[10,    30] loss: 0.119\n[10,    40] loss: 0.107\n[10,    50] loss: 0.124\n[10,    60] loss: 0.109\n[10,    70] loss: 0.091\n[10,    80] loss: 0.081\n[10,    90] loss: 0.096\n[10,   100] loss: 0.130\n[10,   110] loss: 0.141\n[10,   120] loss: 0.107\n[10,   130] loss: 0.088\n[10,   140] loss: 0.185\n[10,   150] loss: 0.091\n[10,   160] loss: 0.165\n[10,   170] loss: 0.137\n[10,   180] loss: 0.142\n[10,   190] loss: 0.121\n[10,   200] loss: 0.174\n[10,   210] loss: 0.155\n[10,   220] loss: 0.133\n[10,   230] loss: 0.124\n[10,   240] loss: 0.114\nFinished Training\n","output_type":"stream"}]},{"cell_type":"code","source":"correct = 0\ntotal = 0\n\nwith torch.no_grad():\n    for data in test_loader:\n        images, labels = data\n        outputs = model(images)\n        _, predicted = torch.max(outputs.data, 1)\n        total += labels.size(0)\n        correct += (predicted == labels).sum().item()\n\nprint('Accuracy on test images: %d %%' % (\n    100 * correct / total))\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T13:58:12.07917Z","iopub.execute_input":"2024-06-14T13:58:12.079572Z","iopub.status.idle":"2024-06-14T13:59:46.007456Z","shell.execute_reply.started":"2024-06-14T13:58:12.079541Z","shell.execute_reply":"2024-06-14T13:59:46.006237Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Accuracy on test images: 86 %\n","output_type":"stream"}]},{"cell_type":"code","source":"torch.save(model.state_dict(), '/kaggle/working/espNet_model.pth')\n","metadata":{"execution":{"iopub.status.busy":"2024-06-14T14:00:04.858346Z","iopub.execute_input":"2024-06-14T14:00:04.858772Z","iopub.status.idle":"2024-06-14T14:00:04.943335Z","shell.execute_reply.started":"2024-06-14T14:00:04.858738Z","shell.execute_reply":"2024-06-14T14:00:04.942013Z"},"trusted":true},"execution_count":7,"outputs":[]}]}